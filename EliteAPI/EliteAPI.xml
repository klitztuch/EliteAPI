<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EliteAPI</name>
    </assembly>
    <members>
        <member name="T:EliteAPI.Abstractions.IEliteDangerousApi">
            <summary>
            EliteAPI
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Version">
            <summary>
            EliteAPI's version
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Events">
            <summary>
            Container for all events
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Ship">
            <summary>
            Container for the ship's current status
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Commander">
            <summary>
            Container for the commander's current status
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Backpack">
            <summary>
            Container for the commander's backpack
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Shipyard">
            <summary>
            Container for the the last visited shipyard
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.NavRoute">
            <summary>
            Container for the ship's current navigation route
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Cargo">
            <summary>
            Container for the ship's current cargo
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Market">
            <summary>
            Container for the current market information
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Modules">
            <summary>
            Container for ship's modules
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Outfitting">
            <summary>
            Container for the current outfitting market information
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.Bindings">
            <summary>
            Container for keybindings information
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.IsInitialized">
            <summary>
            Whether the api is initialized
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.IsRunning">
            <summary>
            Whether the api is currently running
            </summary>
        </member>
        <member name="P:EliteAPI.Abstractions.IEliteDangerousApi.HasCatchedUp">
            <summary>
            Whether the api has catched up on past event in this session
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IEliteDangerousApi.InitializeAsync">
            <summary>
            Initializes the api
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IEliteDangerousApi.StartAsync">
            <summary>
            Starts the api
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IEliteDangerousApi.StopAsync">
            <summary>
            Stops the api
            </summary>
        </member>
        <member name="E:EliteAPI.Abstractions.IEliteDangerousApi.OnCatchedUp">
            <summary>
            Triggered when the api has catched up to the current session
            </summary>
        </member>
        <member name="E:EliteAPI.Abstractions.IEliteDangerousApi.OnStart">
            <summary>
            Triggered when the api has started
            </summary>
        </member>
        <member name="E:EliteAPI.Abstractions.IEliteDangerousApi.OnStop">
            <summary>
            Triggered when the api has stopped
            </summary>
        </member>
        <member name="E:EliteAPI.Abstractions.IEliteDangerousApi.OnError">
            <summary>
            Triggered when the api couldn't start because of an exception
            </summary>
        </member>
        <member name="M:EliteAPI.Abstractions.IJsonObject.ToJson">
            <summary>
            Generates this objects's Json
            </summary>
        </member>
        <member name="T:EliteAPI.Compatibility.Proton.Abstractions.IProtonProvider">
            <summary>
            Provides functionality for proton specific game options.
            </summary>
        </member>
        <member name="M:EliteAPI.Compatibility.Proton.Abstractions.IProtonProvider.GetSteamLibraryLocations">
            <summary>
                Gets the steam library locations
            </summary>
            <returns>Library locations</returns>
        </member>
        <member name="T:EliteAPI.Compatibility.Proton.ProtonProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Compatibility.Proton.ProtonProvider.GetSteamLibraryLocations">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration">
            <summary>
            Interface for the <see cref="T:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration" /> configuration class
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration.JournalPath">
            <summary>
            The active journal directory path
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration.OptionsPath">
            <summary>
            The options directory path
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration.JournalFile">
            <summary>
            The targeted journal file
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration.TickFrequency">
            <summary>
            At which frequency EliteAPI checks for journal and status files updates
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration.BindingsFile">
            <summary>
            The active bindings file
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration.ProcessHistoricalJournals">
            <summary>
            Determines if EliteAPI will process historical journal files
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration.HistoricalJournalSpan">
            <summary>
            The timespan in the past EliteAPI will process for historical journal files
            </summary>
        </member>
        <member name="T:EliteAPI.Configuration.EliteDangerousApiConfiguration">
            <summary>
            Standard implementation of the <see cref="T:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration" /> configuration class
            </summary>
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.JournalPath">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.OptionsPath">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.JournalFile">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.TickFrequency">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.BindingsFile">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.ProcessHistoricalJournals">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.HistoricalJournalSpan">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder">
            <summary>
            Creates a <see cref="T:EliteAPI.Configuration.Abstractions.IEliteDangerousApiConfiguration" /> configuration class through a builder
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.AddEventModule``1">
            <summary>
            Add an event module to EliteAPI
            </summary>
            <typeparam name="T"> The event module to be added </typeparam>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.ClearProcessors">
            <summary>
            Remove the default event processors
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.AddProcessor``1">
            <summary>
            Adds an event processor
            </summary>
            <typeparam name="T"> The event processor to be used </typeparam>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseJournalDirectory(System.String)">
            <summary>
            Sets which directory to use as active journal directory
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseJournalFile(System.String)">
            <summary>
            Sets which journal file to use, defaults to latest if not invoked
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseHistoricalJournals(System.Int32)">
            <summary>
            Enables the processing of historical journal files with an option number of days to process
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseHistoricalJournals(System.TimeSpan)">
            <summary>
            Enables the processing of historical journal files with an option number of days to process
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseBindingsFile(System.String)">
            <summary>
            Sets which bindings to use
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseJournal(System.String)">
            <summary>
            Sets which journal file to use, defaults to latest if not invoked
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseOptionsDirectory(System.String)">
            <summary>
            Sets which directory to use as the options directory
            </summary>
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder.UseTickFrequency(System.TimeSpan)">
            <summary>
            Sets at which frequency EliteAPI should check for journal and status files updates
            </summary>
        </member>
        <member name="T:EliteAPI.EliteDangerousApi">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousApi.#ctor(System.IServiceProvider)">
            <summary>
            Creates a new EliteDangerousAPI class
            </summary>
            <param name="services"> ServiceProvider </param>
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.IsInitialized">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.HasCatchedUp">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Version">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Events">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Ship">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Commander">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Backpack">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Shipyard">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.NavRoute">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Cargo">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Market">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Modules">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Outfitting">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Bindings">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousApi.InitializeAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousApi.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousApi.StopAsync">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.EliteDangerousApi.OnCatchedUp">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.EliteDangerousApi.OnStart">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.EliteDangerousApi.OnStop">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.EliteDangerousApi.OnError">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousApiExtensions.AddEliteAPI(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EliteAPI.Configuration.EliteDangerousApiConfigurationBuilder})">
            <summary>
                Adds all EliteAPI's necessary services to the <seealso cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Attributes.EliteDangerousEventAttribute">
            <summary>
            Class for modular events in EliteAPI
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Attributes.EliteDangerousEventAttribute.#ctor(System.Boolean)">
            <summary>
            Class for modular events in EliteAPI
            </summary>
            <param name="runOnCatchup"> Whether to run this method while catching up </param>
        </member>
        <member name="P:EliteAPI.Event.Attributes.EliteDangerousEventAttribute.RunOnCatchup">
            <summary>
            Whether to run this method while catching up
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Models.Abstractions.EventBase`1">
            <summary>
            An in-game event
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.EventBase`1.Timestamp">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.EventBase`1.Event">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Models.Abstractions.EventBase`1.FromJson(System.String)">
            <summary>
            Generates an event entry from Json
            </summary>
            <param name="json">The json string</param>
        </member>
        <member name="M:EliteAPI.Event.Models.Abstractions.EventBase`1.ToJson">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Models.Abstractions.IEvent">
            <summary>
            An in-game event
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.IEvent.Timestamp">
            <summary>
            The timestamp of the event
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.Abstractions.IEvent.Event">
            <summary>
            The name of the event
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Models.Abstractions.IEvent.ToJson">
            <summary>
            Generates this event's Json
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Models.NotImplementedEvent">
            <summary>
            An empty event, for when the original event has not been implemented
            </summary>
        </member>
        <member name="P:EliteAPI.Event.Models.NotImplementedEvent.Json">
            <summary>
            The original JSON entry
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Module.EliteDangerousEventModule">
            <summary>
            Wrapper for event modules
            </summary>
        </member>
        <member name="F:EliteAPI.Event.Module.EliteDangerousEventModule.EliteAPI">
            <summary>
            The Elite Dangerous API
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Module.EliteDangerousEventModule.#ctor(EliteAPI.Abstractions.IEliteDangerousApi)">
            <summary>
            Wrapper for event modules
            </summary>
            <param name="api"> The EliteDangerousAPI </param>
        </member>
        <member name="T:EliteAPI.Event.Processor.Abstractions.IEventProcessor">
            <summary>
            Invokes registered event-handlers
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.IEventProcessor.RegisterHandlers">
            <summary>
            Finds, registers, and caches the event-handlers
            </summary>
            <returns> </returns>
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.IEventProcessor.InvokeHandler(EliteAPI.Event.Models.Abstractions.IEvent,System.Boolean)">
            <summary>
            Invokes the registered handler for this event
            </summary>
            <param name="gameEvent"> The event to be invoked </param>
            <param name="isWhileCatchingUp"> Whether this event was ran before EliteAPI was started </param>
        </member>
        <member name="P:EliteAPI.Event.Processor.Abstractions.MethodEventProcessorBase.Cache">
            <summary>
            Methods to invoke, mapped to the name of a event
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.MethodEventProcessorBase.RegisterHandlers">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Processor.Abstractions.MethodEventProcessorBase.InvokeHandler(EliteAPI.Event.Models.Abstractions.IEvent,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Processor.AttributeEventProcessor">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Processor.AttributeEventProcessor.RegisterHandlers">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Processor.EventsEventProcessor">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Processor.EventsEventProcessor.RegisterHandlers">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Event.Provider.Abstractions.IEventProvider">
            <summary>
            Converts JSON events to <see cref="!:IEvent&lt;T&gt;" /> events
            </summary>
        </member>
        <member name="M:EliteAPI.Event.Provider.Abstractions.IEventProvider.ProcessJsonEvent(System.String)">
            <summary>
            Processes a json event to <see cref="!:IEvent&lt;T&gt;" />
            </summary>
            <param name="json"> The json event from the journal </param>
        </member>
        <member name="M:EliteAPI.Event.Provider.Abstractions.IEventProvider.RegisterEventClasses">
            <summary>
            Caches all the event classes
            </summary>
        </member>
        <member name="T:EliteAPI.Event.Provider.EventProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Provider.EventProvider.ProcessJsonEvent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Event.Provider.EventProvider.RegisterEventClasses">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException">
            <summary>
            Base class for all EliteAPI's exceptions
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.Abstractions.EliteDangerousApiException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.ActiveBindingsNotFoundException">
            <summary>
            The exception that is thrown when the active binding could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.ActiveBindingsNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ActiveBindingsNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.ActiveBindingsNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ActiveBindingsNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.ActiveBindingsNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ActiveBindingsNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.BackpackFileNotFoundException">
            <summary>
            The exception that is thrown when the Backpack.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.BackpackFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.BackpackFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.BackpackFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.BackpackFileNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.BackpackFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.BackpackFileNotFoundException" /> class with a specified error message
            and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.BindingsDirectoryNotFoundException">
            <summary>
            The exception that is thrown when the bindings option directory could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.BindingsDirectoryNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.BindingsDirectoryNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.BindingsDirectoryNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.BindingsDirectoryNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.BindingsDirectoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.BindingsDirectoryNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.BindingsNotFoundException">
            <summary>
            The exception that is thrown when the active binding could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.BindingsNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.BindingsNotFoundException"/> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.BindingsNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.BindingsNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:EliteAPI.Exceptions.BindingsNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.BindingsNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The inner exception that caused this exception</param>
        </member>
        <member name="T:EliteAPI.Exceptions.CargoFileNotFoundException">
            <summary>
            The exception that is thrown when the Cargo.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.CargoFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.CargoFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.CargoFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.EventHasMissingDataException">
            <summary>
            The exception that is thrown when an event is not implemented
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.EventHasMissingDataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.EventHasMissingDataException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.EventHasMissingDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.EventHasMissingDataException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.EventHasMissingDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.EventHasMissingDataException" /> class with a specified error message and
            a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.EventNotImplementedException">
            <summary>
            The exception that is thrown when an event is not implemented
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.EventNotImplementedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.EventNotImplementedException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.EventNotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.EventNotImplementedException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.EventNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.EventNotImplementedException" /> class with a specified error message and
            a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.InvalidJournalFileException">
            <summary>
            The exception that is thrown when an invalid Journal file is being targeted
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.InvalidJournalFileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.InvalidJournalFileException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.InvalidJournalFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.InvalidJournalFileException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.InvalidJournalFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.InvalidJournalFileException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException">
            <summary>
            The exception that is thrown when an event is not implemented
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalDirectoryNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalDirectoryNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalDirectoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException" /> class with a specified error message
            and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.JournalFileNotFoundException">
            <summary>
            The exception that is thrown when an event is not implemented
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalFileNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.JournalFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalFileNotFoundException" /> class with a specified error message and
            a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.MarketFileNotFoundException">
            <summary>
            The exception that is thrown when the Market.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.MarketFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.MarketFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.MarketFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.ModulesInfoFileNotFoundException">
            <summary>
            The exception that is thrown when the ModulesInfo.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.ModulesInfoFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ModulesInfoFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.ModulesInfoFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ModulesInfoFileNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.ModulesInfoFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ModulesInfoFileNotFoundException" /> class with a specified error message
            and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.NavRouteFileNotFoundException">
            <summary>
            The exception that is thrown when the NavRoute.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.NavRouteFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.MarketFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.NavRouteFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.NavRouteFileNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.NavRouteFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.NavRouteFileNotFoundException" /> class with a specified error message and
            a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.OptionsDirectoryNotFoundException">
            <summary>
            The exception that is thrown when the options directory could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.OptionsDirectoryNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.OptionsDirectoryNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.OptionsDirectoryNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.OptionsDirectoryNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.OptionsDirectoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.OptionsDirectoryNotFoundException" /> class with a specified error message
            and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.OutfittingFileNotFoundException">
            <summary>
            The exception that is thrown when the Status.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.OutfittingFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.OutfittingFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.OutfittingFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.OutfittingFileNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.OutfittingFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.OutfittingFileNotFoundException" /> class with a specified error message
            and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.ShipyardFileNotFoundException">
            <summary>
            The exception that is thrown when the Shipyard.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.ShipyardFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ShipyardFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.ShipyardFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.ShipyardFileNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.ShipyardFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="!:ShipyardFileNotFound" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.StatusFileNotFoundException">
            <summary>
            The exception that is thrown when the Status.json file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.StatusFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.StatusFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.StatusFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.StatusFileNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.StatusFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.StatusFileNotFoundException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Exceptions.SupportFileNotFoundException">
            <summary>
            The exception that is thrown when a support JSON file could not be found
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.SupportFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.SupportFileNotFoundException" /> class
            </summary>
        </member>
        <member name="M:EliteAPI.Exceptions.SupportFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.JournalDirectoryNotFoundException" /> class with a specified error message
            </summary>
            <param name="message"> The message that describes the error </param>
        </member>
        <member name="M:EliteAPI.Exceptions.SupportFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EliteAPI.Exceptions.SupportFileNotFoundException" /> class with a specified error message and
            a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message"> The message that describes the error </param>
            <param name="innerException"> The inner exception that caused this exception </param>
        </member>
        <member name="T:EliteAPI.Journal.Directory.Abstractions.IJournalDirectoryProvider">
            <summary>
            Provides the journal directory
            </summary>
        </member>
        <member name="M:EliteAPI.Journal.Directory.Abstractions.IJournalDirectoryProvider.FindJournalDirectory">
            <summary>
            Finds the journal directory containing all the journal and support files
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Directory.JournalDirectoryProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Directory.JournalDirectoryProvider.FindJournalDirectory">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor">
            <summary>
            Processes journal files
            </summary>
        </member>
        <member name="E:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.NewJournalEntry">
            <summary>
            Triggered when a new json entry is made in the active journal file
            </summary>
        </member>
        <member name="M:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.ProcessJournalFile(System.IO.FileInfo,System.Boolean)">
            <summary>
            Hooks the specified journal file to <see cref="E:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.NewJournalEntry" /> and invokes <see cref="E:EliteAPI.Journal.Processor.Abstractions.IJournalProcessor.NewJournalEntry" /> when
            needed
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Processor.Abstractions.JournalEntry">
            <summary>
            A journal entry
            </summary>
        </member>
        <member name="P:EliteAPI.Journal.Processor.Abstractions.JournalEntry.Json">
            <summary>
            This entry's Json event
            </summary>
        </member>
        <member name="P:EliteAPI.Journal.Processor.Abstractions.JournalEntry.IsWhileCatchingUp">
            <summary>
            Whether this entry was ran before EliteAPI was started
            </summary>
        </member>
        <member name="T:EliteAPI.Journal.Processor.JournalProcessor">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Journal.Processor.JournalProcessor.NewJournalEntry">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Processor.JournalProcessor.ProcessJournalFile(System.IO.FileInfo,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Journal.Provider.Abstractions.IJournalProvider">
            <summary>
            Finds the journal and support files
            </summary>
        </member>
        <member name="M:EliteAPI.Journal.Provider.Abstractions.IJournalProvider.FindJournalFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the active journal file from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="M:EliteAPI.Journal.Provider.Abstractions.IJournalProvider.FindJournalFiles(System.IO.DirectoryInfo)">
            <summary>
            Finds the journal files from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="T:EliteAPI.Journal.Provider.JournalProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Provider.JournalProvider.FindJournalFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Journal.Provider.JournalProvider.FindJournalFiles(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.JsonContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Options.Abstractions.IOption">
            <summary>
            Holds information about the game options
            </summary>
        </member>
        <member name="E:EliteAPI.Options.Abstractions.IOption.OnChange">
            <summary>
            Triggered when any of the properties of this option have been updated
            </summary>
        </member>
        <member name="M:EliteAPI.Options.Abstractions.IOption.ToJson">
            <summary>
            This option's JSON
            </summary>
        </member>
        <member name="T:EliteAPI.Options.Bindings.Models.IBindings">
            <summary>
            Holds information about the keybindings
            </summary>
        </member>
        <member name="P:EliteAPI.Options.Bindings.Models.IBindings.Active">
            <summary>
            The active keybindings
            </summary>
        </member>
        <member name="M:EliteAPI.Options.Bindings.Models.IBindings.ToXml">
            <summary>
            Converts the Bindings to XML format
            </summary>
        </member>
        <member name="T:EliteAPI.Options.Bindings.Bindings">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Options.Bindings.Bindings.OnChange">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Options.Bindings.Bindings.EliteAPI#Options#Abstractions#IOption#TriggerOnChange">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Options.Bindings.Bindings.ToJson">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Options.Bindings.Bindings.EliteAPI#Options#Bindings#Models#IBindings#Active">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Options.Directory.Abstractions.IOptionsDirectoryProvider">
            <summary>
            Provides the options directory
            </summary>
        </member>
        <member name="M:EliteAPI.Options.Directory.Abstractions.IOptionsDirectoryProvider.FindOptionsDirectory">
            <summary>
            Finds the options directory containing all the option directories
            </summary>
        </member>
        <member name="M:EliteAPI.Options.Directory.OptionsDirectoryProvider.FindOptionsDirectory">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Options.Processor.Abstractions.IOptionsProcessor.BindingsUpdated">
            <summary>
            Triggered when the active bindings file is updated
            </summary>
        </member>
        <member name="M:EliteAPI.Options.Processor.Abstractions.IOptionsProcessor.ProcessBindingsFile(System.IO.FileInfo)">
            <summary>
            Hooks the specified options file to <see cref="E:EliteAPI.Options.Processor.Abstractions.IOptionsProcessor.BindingsUpdated" /> and invokes <see cref="E:EliteAPI.Options.Processor.Abstractions.IOptionsProcessor.BindingsUpdated" /> when
            needed
            </summary>
        </member>
        <member name="T:EliteAPI.Options.Processor.OptionsProcessor">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Options.Processor.OptionsProcessor.BindingsUpdated">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Options.Processor.OptionsProcessor.ProcessBindingsFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Options.Provider.Abstractions.IOptionsProvider.FindActiveBindingsFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the active bindings file from the specified options directory
            </summary>
            <param name="optionsDirectory">The options directory</param>
        </member>
        <member name="T:EliteAPI.Options.Provider.OptionsProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Options.Provider.OptionsProvider.FindActiveBindingsFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Services.FileReader.Abstractions.IFileReader">
            <summary>
            A file reading service
            </summary>
        </member>
        <member name="M:EliteAPI.Services.FileReader.Abstractions.IFileReader.ReadAllLines(System.IO.FileInfo)">
            <summary>
            Reads all the lines of a file
            </summary>
            <param name="file">The file to be read</param>
        </member>
        <member name="M:EliteAPI.Services.FileReader.Abstractions.IFileReader.ReadAllText(System.IO.FileInfo)">
            <summary>
            Reads all the text of a file
            </summary>
            <param name="file">The file to be read</param>
        </member>
        <member name="T:EliteAPI.Services.FileReader.FileReader">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Services.FileReader.FileReader.ReadAllLines(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Services.FileReader.FileReader.ReadAllText(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Abstractions.IStatus">
            <summary>
            Holds status information about the game
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Abstractions.IStatus.OnChange">
            <summary>
            Triggered when any of the properties have been updated
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Abstractions.IStatus.ToJson">
            <summary>
            Generates this status's Json
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Abstractions.StatusBase.OnChange">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Abstractions.StatusBase.ToJson">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Backpack.Abstractions.IBackpack">
            <summary>
            Holds information about the ship's cargo
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Backpack.Abstractions.IBackpack.Items">
            <summary>
            The items in the backpack
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Backpack.Abstractions.IBackpack.Components">
            <summary>
            The components in the backpack
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Backpack.Abstractions.IBackpack.Consumables">
            <summary>
            The consumables in the backpack
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Backpack.Abstractions.IBackpack.Data">
            <summary>
            The data in the backpack
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Backpack.Backpack">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Backpack.Backpack.Items">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Backpack.Backpack.Components">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Backpack.Backpack.Consumables">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Backpack.Backpack.Data">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Cargo.Abstractions.ICargo">
            <summary>
            Holds information about the ship's cargo
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Cargo.Abstractions.ICargo.Vessel">
            <summary>
            The name type of vessel that holds the cargo
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Cargo.Abstractions.ICargo.Count">
            <summary>
            The amount of tonnes that are in cargo
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Cargo.Abstractions.ICargo.Inventory">
            <summary>
            All the cargo's inventory
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Cargo.Cargo">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Cargo.Cargo.Vessel">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Cargo.Cargo.Count">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Cargo.Cargo.Inventory">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Cargo.CargoItem">
            <summary>
            Container class for an item in the ship's cargo
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Cargo.CargoItem.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Cargo.CargoItem.NameLocalised">
            <summary>
            The localised name of the item
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Cargo.CargoItem.Count">
            <summary>
            The amount of tonnes of this item in the ship's cargo
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Cargo.CargoItem.Stolen">
            <summary>
            The amount of tonnes of this item in the ship's cargo that are stolen
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.Flags">
            <summary>
            Overview of all ship flags
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.OnFoot">
            <summary>
            Whether the commander is on foot
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.InTaxi">
            <summary>
            Whether the commander is in a taxi
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.InMultiCrew">
            <summary>
            Whether the commander is multicrewing
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.OnFootInStation">
            <summary>
            Whether the commander is on foot in a station
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.OnFootOnPlanet">
            <summary>
            Whether the commander is on foot on a planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.AimDownSight">
            <summary>
            Whether the commander is aiming down the sight of their weapon
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.LowOxygen">
            <summary>
            Whether the commander is low on oxygen
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.LowHealth">
            <summary>
            Whether the commander is low on health
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.Cold">
            <summary>
            Whether the commander is cold
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.Hot">
            <summary>
            Whether the commander is hot
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.VeryCold">
            <summary>
            Whether the commander is very cold 
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.VeryHot">
            <summary>
            Whether the commander is very hot
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.Oxygen">
            <summary>
            The percentage of oxygen available
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.Health">
            <summary>
            The percentage of health
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.Temperature">
            <summary>
            The temperature in Kelvin
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.SelectedWeapon">
            <summary>
            The selected weapon
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.SelectedWeaponLocalised">
            <summary>
            The selected weapon, localised
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Abstractions.ICommander.Gravity">
            <summary>
            The gravity relative to Earth's
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.Flags">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.OnFoot">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.InTaxi">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.InMultiCrew">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.OnFootInStation">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.OnFootOnPlanet">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.AimDownSight">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.LowOxygen">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.LowHealth">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.Cold">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.Hot">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.VeryCold">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.VeryHot">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.Oxygen">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.Health">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.Temperature">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.SelectedWeapon">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.SelectedWeaponLocalised">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Commander.Commander.Gravity">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Ship.Abstractions.IShip">
            <summary>
            Holds all information about the ship
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Flags">
            <summary>
            Overview of all ship flags
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Available">
            <summary>
            Whether ship information is currently available
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Docked">
            <summary>
            Whether the ship is currently docked at a station or outpost
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Landed">
            <summary>
            Whether the ship is currently landed on a planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Gear">
            <summary>
            Whether the ship's landing gear is currently deployed
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Shields">
            <summary>
            Whether the ship's shields are currently active
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Supercruise">
            <summary>
            Whether the ship is currently in supercruise
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FlightAssist">
            <summary>
            Whether the ship's flight assist is enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Hardpoints">
            <summary>
            Whether the ship's weapons are currently deployed
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Winging">
            <summary>
            Whether the ship is currently winging with other commanders
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Lights">
            <summary>
            Whether the ship's exterior lights are currently enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.CargoScoop">
            <summary>
            Whether the ship's cargo scoop is currently deployed
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SilentRunning">
            <summary>
            Whether the ship is currently in silent running mode
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Scooping">
            <summary>
            Whether the ship is currently scooping fuel from a star
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvHandbreak">
            <summary>
            Whether the SRV handbreak is currently enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvTurrent">
            <summary>
            Whether the SRV turrent is currently enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvNearShip">
            <summary>
            Whether the SRV is currently near the mothership
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvDriveAssist">
            <summary>
            Whether the SRV has drive assist currently enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.MassLocked">
            <summary>
            Whether the ship is currently mass locked
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FsdCharging">
            <summary>
            Whether the ship's frame shift drive is currently charging
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FsdCooldown">
            <summary>
            Whether the ship's frame shift drive is currently cooling down
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.LowFuel">
            <summary>
            Whether the ship is currently low on fuel
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Overheating">
            <summary>
            Whether the ship is currently overheating
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.HasLatLong">
            <summary>
            Whether the ship currently has latitude and longitude information available
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InDanger">
            <summary>
            Whether the ship is currently in danger
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InInterdiction">
            <summary>
            Whether the ship is currently being interdicted
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InMothership">
            <summary>
            Whether the ship's commander is currently in the mothership
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InFighter">
            <summary>
            Whether the ship's commander is currently in the fighter
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.InSrv">
            <summary>
            Whether the ship's commander is currently in the SRV
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.AnalysisMode">
            <summary>
            Whether the ship is currently in analysis mode
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.NightVision">
            <summary>
            Whether the ship currently has night vision enabled
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.AltitudeFromAverageRadius">
            <summary>
            Whether the ship's current altitude is being calculated by the planet's average radius
            See also <see cref="P:EliteAPI.Status.Ship.Abstractions.IShip.Altitude" />
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FsdJump">
            <summary>
            Whether the ship is currently in a jump to another star system
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.SrvHighBeam">
            <summary>
            Whether the ship's SRV high beam is currently active
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Pips">
            <summary>
            The ship's currently energy distribution configuration
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.FireGroup">
            <summary>
            The ship's current firegroup
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.GuiFocus">
            <summary>
            The ship's current interface focus
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Fuel">
            <summary>
            The ship's current fuel information
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Cargo">
            <summary>
            The ship's currently amount of cargo in tonnes
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.LegalState">
            <summary>
            The ship's current legal state
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Latitude">
            <summary>
            The ship's current latitude on the planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Altitude">
            <summary>
            The ship's current altitude on the planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Longitude">
            <summary>
            The ship's current longitude on the planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Heading">
            <summary>
            The ship's current heading on the planet
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Body">
            <summary>
            The name of the body the ship is currently visiting
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.BodyRadius">
            <summary>
            The radius of the currently visiting body
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.Abstractions.IShip.Destination">
            <summary>
            The destination of the ship
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.JsonConverters.DecimalToIntConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Ship.JsonConverters.DecimalToIntConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Ship.JsonConverters.DecimalToIntConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Ship.JsonConverters.DecimalToIntConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Ship.Ship">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Flags">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Available">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Docked">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Landed">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Gear">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Shields">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Supercruise">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FlightAssist">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Hardpoints">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Winging">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Lights">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.CargoScoop">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SilentRunning">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Scooping">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvHandbreak">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvTurrent">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvNearShip">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvDriveAssist">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.MassLocked">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FsdCharging">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FsdCooldown">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.LowFuel">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Overheating">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.HasLatLong">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InDanger">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InInterdiction">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InMothership">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InFighter">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.InSrv">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.AnalysisMode">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.NightVision">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.AltitudeFromAverageRadius">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FsdJump">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.SrvHighBeam">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Destination">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Pips">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.FireGroup">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.GuiFocus">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Fuel">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Cargo">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.LegalState">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Latitude">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Altitude">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Longitude">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Heading">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.Body">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Ship.Ship.BodyRadius">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Ship.ShipDestination">
            <summary>
            Container class for information about the ship's destination
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Ship.ShipFuel">
            <summary>
            Container class for information about the ship's fuel situation
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipFuel.Main">
            <summary>
            The ship's current amount of fuel left in the main fuel tank
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipFuel.Reservoir">
            <summary>
            The ship's current amount of fuel left in the reservoir fuel tank
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Ship.ShipGuiFocus">
            <summary>
            Ship GUI focus
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.NoFocus">
            <summary>
            There is no focus
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.InternalPanel">
            <summary>
            The internal (right) panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.ExternalPanel">
            <summary>
            The external (left) panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.CommsPanel">
            <summary>
            The communication panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.RolePanel">
            <summary>
            The role panel
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.StationServices">
            <summary>
            Station services
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.GalaxyMap">
            <summary>
            The galaxy map
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.SystemMap">
            <summary>
            The system map
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.Orrery">
            <summary>
            The orrery
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.FssMode">
            <summary>
            Full spectrum scanner mode
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.SaaMode">
            <summary>
            Saa mode
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipGuiFocus.Codex">
            <summary>
            The codex
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Ship.ShipLegalState">
            <summary>
            Legal ship states
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Clean">
            <summary>
            Clean
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.IllegalCargo">
            <summary>
            Illegal cargo on-board
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Speeding">
            <summary>
            Speeding at stations
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Wanted">
            <summary>
            Wanted
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Hostile">
            <summary>
            Hostile
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.PassengerWanted">
            <summary>
            Passenger on ship is wanted
            </summary>
        </member>
        <member name="F:EliteAPI.Status.Ship.ShipLegalState.Warrant">
            <summary>
            Warrant for arrest
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipPips.System">
            <summary>
            Amount of half pips set to systems
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipPips.Engines">
            <summary>
            Amount of half pips set to engines
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Ship.ShipPips.Weapons">
            <summary>
            Amount of half pips set to weapons
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Market.Abstractions.IMarket">
            <summary>
            Holds information about the current market
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Abstractions.IMarket.MarketId">
            <summary>
            The id of this market
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Abstractions.IMarket.StationName">
            <summary>
            The name of the station of this market
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Abstractions.IMarket.StationType">
            <summary>
            The type of station this market is
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Abstractions.IMarket.StarSystem">
            <summary>
            The name of the starsystem
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Abstractions.IMarket.Commodities">
            <summary>
            All the commodities that are traded at this market
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Market.Commodity">
            <summary>
            A commodity that is traded in a market
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.Id">
            <summary>
            The id of this commodity entry
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.Name">
            <summary>
            The name of the commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.NameLocalised">
            <summary>
            The localised name of this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.Category">
            <summary>
            The category of this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.CategoryLocalised">
            <summary>
            The localised category of this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.BuyPrice">
            <summary>
            The buy price of this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.SellPrice">
            <summary>
            The sell price of this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.MeanPrice">
            <summary>
            The mean price of this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.StockBracket">
            <summary>
            The bracket of stock for this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.DemandBracket">
            <summary>
            The bracket of demand for this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.Stock">
            <summary>
            This market's stock for this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.Demand">
            <summary>
            This market's demand for this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.Consumer">
            <summary>
            Whether this market is a consumer of this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.Producer">
            <summary>
            Whether this market is a producer of this commodity
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Market.Commodity.Rare">
            <summary>
            Whether this commodity is rare
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Market.Market">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Market.Market.MarketId">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Market.Market.StationName">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Market.Market.StationType">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Market.Market.StarSystem">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Market.Market.Commodities">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Modules.Abstractions.IModules">
            <summary>
            Holds information about the ship's currently installed modules
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Modules.Abstractions.IModules.Installed">
            <summary>
            A list of installed modules
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Modules.Module">
            <summary>
            Holds information about a module in the ship
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Modules.Module.Slot">
            <summary>
            In which slot this module is located
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Modules.Module.Name">
            <summary>
            The module's name
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Modules.Module.Power">
            <summary>
            The factor of power this module has
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Modules.Module.Priority">
            <summary>
            The priority of this module, if applicable
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Modules.Modules.Installed">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.NavRoute.Abstractions.INavRoute">
            <summary>
            Holds information about the current navigation route
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.Abstractions.INavRoute.Stops">
            <summary>
            All stops on the route
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.NavRoute.Stops">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.NavRoute.RouteStop">
            <summary>
            Container class for a waypoint on the route
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.RouteStop.System">
            <summary>
            The name of the star system
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.RouteStop.Address">
            <summary>
            The address of the star system
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.RouteStop.Position">
            <summary>
            The position of the star system
            </summary>
        </member>
        <member name="P:EliteAPI.Status.NavRoute.RouteStop.Class">
            <summary>
            The class of the star system's main star
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Outfitting.Abstractions.IOutfitting">
            <summary>
            Holds information about the currently available outfitting deals at the station market
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Abstractions.IOutfitting.MarketId">
            <summary>
            The id of this market
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Abstractions.IOutfitting.StationName">
            <summary>
            The name of the station of this market
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Abstractions.IOutfitting.StarSystem">
            <summary>
            The name of the starsystem
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Abstractions.IOutfitting.Horizons">
            <summary>
            Whether the Horizon DLC is active
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Abstractions.IOutfitting.Deals">
            <summary>
            The outfitting items being dealt at this station
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Outfitting.Outfitting">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Outfitting.MarketId">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Outfitting.StationName">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Outfitting.StarSystem">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Outfitting.Horizons">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Outfitting.Outfitting.Deals">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Outfitting.OutfittingItem">
            <summary>
            Holds information about an outfitting item
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Outfitting.OutfittingItem.Id">
            <summary>
            The id of this outfitting deal
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Outfitting.OutfittingItem.Name">
            <summary>
            The name of the module
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Outfitting.OutfittingItem.Price">
            <summary>
            The price of this module
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Processor.Abstractions.IStatusProcessor">
            <summary>
            Processes status files
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.StatusUpdated">
            <summary>
            Triggered when the status file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipUpdated">
            <summary>
            Triggered when the status file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.CargoUpdated">
            <summary>
            Triggered when the cargo file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.MarketUpdated">
            <summary>
            Triggered when the market file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipyardUpdated">
            <summary>
            Triggered when the shipyard file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ModulesUpdated">
            <summary>
            Triggered when the modules file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.OutfittingUpdated">
            <summary>
            Triggered when the outfitting file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.NavRouteUpdated">
            <summary>
            Triggered when the navroute file is updated
            </summary>
        </member>
        <member name="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.BackpackUpdated">
            <summary>
            Triggered when the navroute file is updated
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessStatusFile(System.IO.FileInfo)">
            <summary>
            Hooks the specified status file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.StatusUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.StatusUpdated" /> when
            needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessCargoFile(System.IO.FileInfo)">
            <summary>
            Hooks the specified cargo file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.CargoUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.CargoUpdated" /> when needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessMarketFile(System.IO.FileInfo)">
            <summary>
            Hooks the specified market file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.MarketUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.MarketUpdated" /> when
            needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessShipyardFile(System.IO.FileInfo)">
            <summary>
            Hooks the specified shipyard file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipyardUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ShipyardUpdated" /> when
            needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessModulesFile(System.IO.FileInfo)">
            <summary>
            Hooks the specified modules file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ModulesUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ModulesUpdated" /> when
            needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessOutfittingFile(System.IO.FileInfo)">
            <summary>
            Hooks the specified outfitting file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.OutfittingUpdated" /> and invokes
            <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.OutfittingUpdated" /> when needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessNavRouteFile(System.IO.FileInfo)">
            <summary>
            Hooks the specified navroute file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.NavRouteUpdated" /> and invokes <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.NavRouteUpdated" /> when
            needed
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.ProcessBackpackFile(System.IO.FileInfo)">
            <summary>
            Hooks the specified backpack file to <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.BackpackUpdated" /> and invokes
            <see cref="E:EliteAPI.Status.Processor.Abstractions.IStatusProcessor.BackpackUpdated" /> when needed
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Processor.StatusProcessor">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.StatusUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.ShipUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.ModulesUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.CargoUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.MarketUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.ShipyardUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.OutfittingUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.NavRouteUpdated">
            <inheritdoc />
        </member>
        <member name="E:EliteAPI.Status.Processor.StatusProcessor.BackpackUpdated">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessStatusFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessCargoFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessModulesFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessMarketFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessShipyardFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessOutfittingFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessNavRouteFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Processor.StatusProcessor.ProcessBackpackFile(System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Provider.Abstractions.IStatusProvider">
            <summary>
            Provides status files
            </summary>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindStatusFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the status file from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindMarketFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the market file from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindCargoFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the cargo file from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindShipyardFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the shipyard file from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindOutfittingFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the outfitting file from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindModulesFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the modules file from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindNavRouteFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the navroute file from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="M:EliteAPI.Status.Provider.Abstractions.IStatusProvider.FindBackpackFile(System.IO.DirectoryInfo)">
            <summary>
            Finds the backpack file from the specified journal directory
            </summary>
            <param name="journalDirectory"> The journal directory </param>
        </member>
        <member name="T:EliteAPI.Status.Provider.StatusProvider">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindStatusFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindMarketFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindModulesFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindCargoFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindShipyardFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindOutfittingFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindNavRouteFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Status.Provider.StatusProvider.FindBackpackFile(System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.Shipyard.Abstractions.IShipyard">
            <summary>
            Holds information about the active shipyard
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Abstractions.IShipyard.MarketId">
            <summary>
            The market id for the station this shipyard is at
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Abstractions.IShipyard.StationName">
            <summary>
            The name of the station this shipyard is at
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Abstractions.IShipyard.StarSystem">
            <summary>
            The name of the starsystem this shipyard is at
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Abstractions.IShipyard.HasHorizons">
            <summary>
            Whether the commander has the Horizons expansion
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Abstractions.IShipyard.AllowsCobraMk4">
            <summary>
            Whether the commander has access to the Cobra Mk IV
            </summary>
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Abstractions.IShipyard.Deals">
            <summary>
            The deals in this shipyard
            </summary>
        </member>
        <member name="T:EliteAPI.Status.Shipyard.Shipyard">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Shipyard.MarketId">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Shipyard.StationName">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Shipyard.StarSystem">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Shipyard.HasHorizons">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Shipyard.AllowsCobraMk4">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Status.Shipyard.Shipyard.Deals">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Status.StatusProperty`1">
            <summary>
            Container class for a status property
            </summary>
        </member>
        <member name="F:EliteAPI.Status.StatusProperty`1.OnChange">
            <summary>
            Triggered whenever this property is changed
            </summary>
        </member>
        <member name="P:EliteAPI.Status.StatusProperty`1.Value">
            <summary>
            The value of this property
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
